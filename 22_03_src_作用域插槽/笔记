需求：
第一个列表：无序列表
第二个列表：有序，前面有数字: 1、红色警戒
第三个列表：每一行数据是<h4></h4>

作用域问题：
  Category组件里面的games怎么传给App组件
   Category组件里面的games怎么传给App组件, 这里把games传给插槽的使用者（往查出里面塞结构，比如：App组件）
          <slot :games="games"></slot>
    怎么接收？
    <template scope="scopeData">
      <ul >
           <li v-for ="(g,index) in scopeData.games" :key="index">{{g}}</li>
      </ul>
    </template>

------------

 scope="scopeData" 和 slot- scope="scopeData"一样，只是写法不一样


==============================
## 插槽

 1. 作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===> 子组件</strong> 。

 2. 分类：默认插槽、具名插槽、作用域插槽

 3. 使用方式：

   3. 作用域插槽：

          1. 理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）

          2. 具体编码：

             ```vue
             父组件中：
             		<Category>
             			<template scope="scopeData">
             				<!-- 生成的是ul列表 -->
             				<ul>
             					<li v-for="g in scopeData.games" :key="g">{{g}}</li>
             				</ul>
             			</template>
             		</Category>

             		<Category>
             			<template slot-scope="scopeData">
             				<!-- 生成的是h4标题 -->
             				<h4 v-for="g in scopeData.games" :key="g">{{g}}</h4>
             			</template>
             		</Category>
             子组件中：
                     <template>
                         <div>
                             <slot :games="games"></slot>
                         </div>
                     </template>

                     <script>
                         export default {
                             name:'Category',
                             props:['title'],
                             //数据在子组件自身
                             data() {
                                 return {
                                     games:['红色警戒','穿越火线','劲舞团','超级玛丽']
                                 }
                             },
                         }
                     </script>
             ```
       ```
